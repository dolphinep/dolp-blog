[{"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/index.js":"1","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/ApolloProvider.js":"2","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/reportWebVitals.js":"3","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/App.js":"4","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/AuthRouter.js":"5","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Login.js":"6","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/MenuBar.js":"7","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/SinglePost.js":"8","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Contact.js":"9","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/context/auth.js":"10","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Home.js":"11","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Register.js":"12","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Timer.js":"13","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/hooks.js":"14","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/graphql.js":"15","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/DeleteButton.js":"16","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/PostCard.js":"17","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/LikeButton.js":"18","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/AuthorCard.js":"19","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/PostForm.js":"20","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/editor/QuillEditor.js":"21","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/MyPopup.js":"22","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/EditButton.js":"23"},{"size":508,"mtime":1608977706515,"results":"24","hashOfConfig":"25"},{"size":1241,"mtime":1611520741570,"results":"26","hashOfConfig":"25"},{"size":362,"mtime":1608976251538,"results":"27","hashOfConfig":"25"},{"size":1157,"mtime":1611399041955,"results":"28","hashOfConfig":"25"},{"size":558,"mtime":1609683469902,"results":"29","hashOfConfig":"25"},{"size":3454,"mtime":1611556088182,"results":"30","hashOfConfig":"25"},{"size":2928,"mtime":1611398723827,"results":"31","hashOfConfig":"25"},{"size":8921,"mtime":1611566722256,"results":"32","hashOfConfig":"25"},{"size":7483,"mtime":1611332279098,"results":"33","hashOfConfig":"25"},{"size":1455,"mtime":1609682846003,"results":"34","hashOfConfig":"25"},{"size":1973,"mtime":1611388633971,"results":"35","hashOfConfig":"25"},{"size":4197,"mtime":1609914300766,"results":"36","hashOfConfig":"25"},{"size":1072,"mtime":1611388649572,"results":"37","hashOfConfig":"25"},{"size":412,"mtime":1611561780699,"results":"38","hashOfConfig":"25"},{"size":333,"mtime":1611566058437,"results":"39","hashOfConfig":"25"},{"size":1622,"mtime":1611099495711,"results":"40","hashOfConfig":"25"},{"size":2217,"mtime":1611566629465,"results":"41","hashOfConfig":"25"},{"size":1769,"mtime":1610889178248,"results":"42","hashOfConfig":"25"},{"size":1361,"mtime":1611388467154,"results":"43","hashOfConfig":"25"},{"size":3653,"mtime":1611563170130,"results":"44","hashOfConfig":"25"},{"size":14357,"mtime":1611399851255,"results":"45","hashOfConfig":"25"},{"size":205,"mtime":1609382362426,"results":"46","hashOfConfig":"25"},{"size":841,"mtime":1611388527208,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"qc4l3x",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"50"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"95"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"50"},"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/index.js",[],["99","100"],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/ApolloProvider.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/reportWebVitals.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/App.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/AuthRouter.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Login.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/MenuBar.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/SinglePost.js",["101"],"import gql from 'graphql-tag'\nimport React, { useContext, useState, useRef } from 'react'\nimport { useMutation, useQuery } from '@apollo/react-hooks'\nimport { Button, Header, Card, Comment, Grid, Image, Icon, Label, Form, Divider } from 'semantic-ui-react'\nimport moment from 'moment'\nimport { AuthContext } from '../context/auth'\nimport LikeButton from '../components/LikeButton'\nimport DeleteButton from '../components/DeleteButton'\nimport QuillEditor from '../components/editor/QuillEditor'\nimport parse from 'html-react-parser';\n\n\nfunction SinglePost(props) {\n    const postID = props.match.params.postID\n    const [title, setTitle] = useState(\"\")\n    const [body, setBody] = useState(\"\")\n    const [story, setStory] = useState(\"\")\n    const [comment, setComment] = useState(\"\")\n    const [editing, setEditing] = useState(false)\n    const { user } = useContext(AuthContext)\n\n\n    const [files, setFiles] = useState([])\n\n    const onEditorChange = (value) => {\n        setStory(value)\n    }\n\n    const onFilesChange = (files) => {\n        setFiles(files)\n    }\n\n    const commentInputRef = useRef(null)\n    const [submitComment] = useMutation(SUBMIT_COMMENT_MUTATION, {\n        update() {\n            setComment('');\n            commentInputRef.current.blur();\n        },\n        variables: {\n            postID,\n            body: comment\n        }\n    });\n\n    const [submitEdit] = useMutation(UPDATE_POST_MUTATION, {\n        update() {\n            setEditing(false)\n        },\n        variables: {\n            postID,\n            title,\n            body,\n            story\n        }\n    })\n\n    const { data: { getPost } = {} } = useQuery(FETCH_POST_QUERY, {\n        variables: {\n            postID\n        },\n        onCompleted() {\n            setTitle(getPost.title)\n            setBody(getPost.body)\n            setStory(getPost.story)\n        }\n    })\n\n    let postMarkup;\n    if (!getPost) {\n        postMarkup = <p>Loading post...</p>\n    } else {\n        const {\n            id,\n            title,\n            body,\n            tags,\n            story,\n            createdAt,\n            username,\n            comments,\n            likes,\n            likeCount,\n            commentCount\n        } = getPost;\n\n        postMarkup = (\n            <Grid stackable>\n                <Grid.Column width={3} only=\"computer\">\n                    <Image src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                        size=\"small\"\n                        float=\"right\" />\n                </Grid.Column>\n                <Grid.Column width={9}>\n                    <Card fluid>\n                        <Card.Content>\n                            <Card.Header>{title}</Card.Header>\n                            <Card.Meta>\n                                {tags.map(tag => <Button basic content={tag} size=\"mini\" compact color=\"blue\" />)}\n                            </Card.Meta>\n                            <Card.Meta>{username}</Card.Meta>\n                            <Card.Meta>{moment(createdAt).fromNow()}</Card.Meta>\n                            <Card.Description>{body}</Card.Description>\n                        </Card.Content>\n                    </Card>\n                    <Card.Content extra>\n                        <LikeButton user={user} post={{ id, likeCount, likes }} />\n                        <Button\n                            as=\"div\"\n                            labelPosition=\"right\"\n                            onClick={() => console.log(\"Comment on post\")}>\n                            <Button basic color=\"blue\">\n                                <Icon name=\"comments\" />\n                            </Button>\n                            <Label basic color=\"blue\" pointing=\"left\">\n                                {commentCount}\n                            </Label>\n                        </Button>\n                        {user && user.username === username && (editing ?\n                            <Button.Group floated=\"right\" >\n                                <Button onClick={() => setEditing(!editing)}>Cancle</Button>\n                                <Button.Or />\n                                <Button color=\"teal\" onClick={submitEdit}>Save</Button>\n                            </Button.Group>\n                            :\n                            story ?\n                                <Button floated=\"right\" color=\"teal\" onClick={() => setEditing(!editing)}>Edit Story</Button>\n                                :\n                                <Button floated=\"right\" color=\"teal\" onClick={() => setEditing(!editing)}>Add Story...</Button>)}\n                    </Card.Content>\n                    <Divider hidden />\n                    {user && editing ?\n                        <QuillEditor\n                            placeholder={\"Start Posting Something\"}\n                            old={story}\n                            onEditorChange={onEditorChange}\n                            onFilesChange={onFilesChange}\n                        />\n                        :\n                        (story && parse(story))\n\n                    }\n                    <Header as='h3' dividing>Comment</Header>\n                    {comments.map(comment => (\n                        <Comment.Group fluid key={comment.id}>\n                            <Comment>\n                                <Comment.Avatar src='https://react.semantic-ui.com/images/avatar/small/matt.jpg' />\n                                <Comment.Content>\n                                    {user && user.username === comment.username && (\n                                        <DeleteButton postID={id} commentID={comment.id} />\n                                    )}\n                                    <Comment.Author>{comment.username}</Comment.Author>\n                                    <Comment.Metadata>{moment(comment.createdAt).fromNow()}</Comment.Metadata>\n                                    <Comment.Text>{comment.body}</Comment.Text>\n                                </Comment.Content>\n                            </Comment>\n                        </Comment.Group>\n                    ))}\n                    {user && (\n                        <Card fluid>\n                            <Card.Content>\n                                <p>Post a comment</p>\n                                <Form>\n                                    <div className=\"ui action input fluid\">\n                                        <input\n                                            type=\"text\"\n                                            placeholder=\"Comment..\"\n                                            name=\"comment\"\n                                            value={comment}\n                                            onChange={(event) => setComment(event.target.value)}\n                                            ref={commentInputRef}\n                                        />\n                                        <button\n                                            type=\"submit\"\n                                            className=\"ui button teal\"\n                                            disabled={comment.trim() === ''}\n                                            onClick={submitComment}>\n                                            Submit\n                                            </button>\n                                    </div>\n                                </Form>\n                            </Card.Content>\n                        </Card>\n                    )}\n                </Grid.Column>\n            </Grid>\n        )\n    }\n    return postMarkup\n}\n\nconst SUBMIT_COMMENT_MUTATION = gql`\n  mutation($postID: ID!, $body: String!) {\n    createComment(postID: $postID, body: $body) {\n      id\n      comments {\n        id\n        body\n        createdAt\n        username\n      }\n      commentCount\n    }\n  }\n`;\n\nconst FETCH_POST_QUERY = gql`\n    query($postID: ID!){\n        getPost(postID: $postID){\n            id\n            title\n            body\n            tags\n            story\n            createdAt\n            username\n            likeCount\n            likes {\n                username\n            }\n            commentCount\n            comments {\n                id\n                username\n                createdAt\n                body\n            }\n        }\n    }\n`;\n\nconst UPDATE_POST_MUTATION = gql`\n    mutation($postID: ID!,$title: String!, $body: String!, $story:String!) {\n        updatePost(postID: $postID, title: $title, body: $body, story: $story){\n            id\n            title\n            body\n            story\n            createdAt\n            username\n            likeCount\n            likes {\n                username\n            }\n            commentCount\n            comments {\n                id\n                username\n                createdAt\n                body\n            }\n        }\n    }\n`;\n\nexport default SinglePost;\n","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Contact.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/context/auth.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Home.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Register.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/pages/Timer.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/hooks.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/graphql.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/DeleteButton.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/PostCard.js",["102"],"import React, { useContext } from 'react';\nimport { Button, Card, Icon, Label, Image, Divider } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\nimport moment from 'moment';\n\nimport { AuthContext } from '../context/auth';\nimport LikeButton from './LikeButton';\nimport DeleteButton from './DeleteButton';\nimport EditButton from './EditButton'\nimport MyPopup from '../utils/MyPopup';\n\nfunction PostCard({\n    post: { title, body, createdAt, id, username, likeCount, commentCount, likes, tags }\n}) {\n    const { user } = useContext(AuthContext);\n\n    return (\n        <Card color=\"blue\" fluid>\n            <Card.Content>\n                <Image\n                    floated=\"right\"\n                    size=\"mini\"\n                    src=\"https://react.semantic-ui.com/images/avatar/large/molly.png\"\n                />\n                <Card.Header as={Link} to={`/posts/${id}`}>\n                    {title}\n                </Card.Header>\n                <Card.Meta>\n                    {tags.map(tag => <Button basic content={tag} size=\"mini\" compact color=\"blue\" />)}\n                </Card.Meta>\n                <Card.Meta as={Link} to={`/posts/${id}`}>\n                    {moment(createdAt).fromNow(true)}\n                </Card.Meta>\n                <Card.Meta>{username}</Card.Meta>\n                <Card.Description >{body}</Card.Description>\n            </Card.Content>\n            <Card.Content extra>\n                <LikeButton user={user} post={{ id, likes, likeCount }} />\n                <MyPopup content=\"Comment on post\">\n                    <Button labelPosition=\"right\" as={Link} to={`/posts/${id}`}>\n                        <Button color=\"blue\" basic>\n                            <Icon name=\"comments\" />\n                        </Button>\n                        <Label basic color=\"blue\" pointing=\"left\">\n                            {commentCount}\n                        </Label>\n                    </Button>\n                </MyPopup>\n                {user && user.username === username && <DeleteButton postID={id} />}\n                {user && user.username === username && <EditButton postID={id} />}\n            </Card.Content>\n        </Card>\n    );\n}\n\nexport default PostCard;","/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/LikeButton.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/AuthorCard.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/PostForm.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/editor/QuillEditor.js",[],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/utils/MyPopup.js",[],["103","104"],"/Users/user/Ping/pingWorkspace/web/dolp-blog/src/components/EditButton.js",["105"],"import React, { useState } from 'react';\nimport { Button, Icon } from 'semantic-ui-react';\nimport { Link } from 'react-router-dom';\n\nimport MyPopup from '../utils/MyPopup';\n\nfunction EditButton({ postID, commentID, callback }) {\n    const [confirmOpen, setConfirmOpen] = useState(false);\n\n    return (\n        <>\n            <MyPopup content={commentID ? 'Edit comment' : 'Write Story'}>\n                <Button\n                    floated=\"right\"\n                    icon\n                    size=\"small\"\n                    onClick={() => setConfirmOpen(true)}\n                    as={Link}\n                    to={`/posts/${postID}`}\n                >\n                    <Icon name=\"pencil alternate\" style={{ margin: 0 }} size=\"small\" />\n                </Button>\n            </MyPopup>\n        </>\n    );\n}\n\n\nexport default EditButton;",{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":23,"column":12,"nodeType":"112","messageId":"113","endLine":23,"endColumn":17},{"ruleId":"110","severity":1,"message":"114","line":2,"column":44,"nodeType":"112","messageId":"113","endLine":2,"endColumn":51},{"ruleId":"106","replacedBy":"115"},{"ruleId":"108","replacedBy":"116"},{"ruleId":"110","severity":1,"message":"117","line":8,"column":12,"nodeType":"112","messageId":"113","endLine":8,"endColumn":23},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"no-unused-vars","'files' is assigned a value but never used.","Identifier","unusedVar","'Divider' is defined but never used.",["118"],["119"],"'confirmOpen' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]